node('walmartNode'){

 try{
 
     slackNotifications('STARTED')
    
    echo "the job name is: ${env.JOB_NAME}"
    echo "the node name is: ${env.NODE_NAME}"
    echo "the build number is: ${env.BUILD_NUMBER}"
    
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])
    
    /*
    jacoco buildOverBuild: true, changeBuildStatus: true, deltaBranchCoverage: '80', deltaClassCoverage: '80', deltaComplexityCoverage: '80', deltaInstructionCoverage: '80', deltaLineCoverage: '80', deltaMethodCoverage: '80', maximumBranchCoverage: '80', maximumClassCoverage: '80', maximumComplexityCoverage: '80', maximumInstructionCoverage: '80', maximumLineCoverage: '80', maximumMethodCoverage: '80', minimumBranchCoverage: '80', minimumClassCoverage: '80', minimumComplexityCoverage: '80', minimumInstructionCoverage: '80', minimumLineCoverage: '80', minimumMethodCoverage: '80'
    */
    
    def mavenHome = tool name: 'maven3.8.6'
    
    stage('checkoutcode'){
       git branch: 'development', credentialsId: 'ef2173cb-25d5-4eff-a80b-efe709513d22', url: 'https://github.com/yprawsdevops/maven-web-application.git/' 
    }
    stage('Build'){
        sh "${mavenHome}/bin/mvn package"
    }
    stage('Execution into Sonarqube'){
       sh "${mavenHome}/bin/mvn clean package sonar:sonar" 
    }
    stage('upload artifacts into nexus'){
       sh "${mavenHome}/bin/mvn clean package sonar:sonar deploy" 
    }
    stage('deployapp into tomcat'){
      sshagent(['89882390-13a5-4cde-a843-346d8b094cc9']){
        sh "scp -o strictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.41.161:/opt/apache-tomcat-9.0.68/webapps/" 
     }  
    }
    
    } // try closing
    catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } 
  finally {
    // Success or failure, always send notifications
       slackNotifications(currentBuild.result)
  }
} // node closing

def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'ORANGE'
    colorCode = '#FFA500'
  } 
  else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } 
  else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#walmart")
}

