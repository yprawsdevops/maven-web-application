@Library('sharedlibsmss') _

node{

 try{
 
 sendSlackNotifications('STARTED')
 
    echo "the jobname is: ${env.JOB_NAME}"
    echo "the node name is: ${env.NODE_NAME}"
    echo "the build number is: ${env.BUILD_NUMBER}"
    
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])

def mavenHome = tool name: 'maven3.8.6'

stage('checkoutcode'){
    git branch: 'development', credentialsId: '156dd0c6-836a-49d6-8337-f1b60b3f57dc', url: 'https://github.com/ysrawsdevops/maven-web-application.git'
     }    
stage('build'){    
    sh "${mavenHome}/bin/mvn package"
    }
  
stage('Executesonarreport'){
    sh "${mavenHome}/bin/mvn clean sonar:sonar"
}
stage('Upload artifactsapplication into Nexus'){
    sh "${mavenHome}/bin/mvn clean deploy"
}
stage('deploy into tomcatserver'){
sshagent(['58b8a866-134f-4f23-9dc9-42ee2afa4371']) {
  sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.40.37:/opt/apache-tomcat-9.0.67/webapps/"
}
}
  
  } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    sendSlackNotifications(currentBuild.result)
  }
}
/*
def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'ORANGE'
    colorCode = '#FFA500'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#walmart")
}
*/

